{
  "comments": [
    {
      "key": {
        "uuid": "5a43c5e1_e0733cb3",
        "filename": "distroinfo/fetch.py",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-05T10:15:33Z",
      "side": 1,
      "message": "This fails to pass py3 unit tests, need to change it to:\n\nfrom distroinfo import exception",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 16
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_e31106b1",
        "filename": "distroinfo/fetch.py",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 6
      },
      "writtenOn": "2018-04-06T13:20:49Z",
      "side": 1,
      "message": "Same issue running tox on my laptop",
      "parentUuid": "5a43c5e1_e0733cb3",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 16
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_91ac0cef",
        "filename": "distroinfo/fetch.py",
        "patchSetId": 2
      },
      "lineNbr": 4,
      "author": {
        "id": 421
      },
      "writtenOn": "2018-04-09T14:16:35Z",
      "side": 1,
      "message": "Yes, I forgot to menition this, py3 compat is also TODO :)",
      "parentUuid": "5a43c5e1_e31106b1",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 16
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_00798893",
        "filename": "distroinfo/info.py",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-05T10:15:33Z",
      "side": 1,
      "message": "These fail in python 3, need to use \"from distroinfo import...\"",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 2,
        "endChar": 12
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_031752a4",
        "filename": "distroinfo/info.py",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 6
      },
      "writtenOn": "2018-04-06T13:20:49Z",
      "side": 1,
      "message": "What is RemoteRawInfoFetcher ?",
      "range": {
        "startLine": 21,
        "startChar": 46,
        "endLine": 21,
        "endChar": 66
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_51b6843e",
        "filename": "distroinfo/info.py",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 421
      },
      "writtenOn": "2018-04-09T14:16:35Z",
      "side": 1,
      "message": "For fetching remote raw info files :) As in getting the files directly through HTTP(S) without the need to sync entire git repo which is currently bottleneck for all rdoinfo-related operations and it\u0027s constantly slowing down as rdoinfo repo grows. It\u0027s currently almost 1.7 k commits.\n\nI stole this idea from jjoyce\u0027s rdo.py script which fetches info this way and also caches it for extra speed.",
      "parentUuid": "5a43c5e1_031752a4",
      "range": {
        "startLine": 21,
        "startChar": 46,
        "endLine": 21,
        "endChar": 66
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_110a3cd3",
        "filename": "distroinfo/info.py",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-09T14:37:37Z",
      "side": 1,
      "message": "Actually, this is a good idea for cases like the upstream OpenStack infra, where they do not want to depend on stuff hosted on GitHub. By having this option, we could host the rdoinfo repo on trunk.rdoproject.org, and have it used directly (and cached by the infra mirrors).",
      "parentUuid": "5a43c5e1_51b6843e",
      "range": {
        "startLine": 21,
        "startChar": 46,
        "endLine": 21,
        "endChar": 66
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_7172a07e",
        "filename": "distroinfo/info.py",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 6
      },
      "writtenOn": "2018-04-09T14:41:37Z",
      "side": 1,
      "message": "Ok, this is what I though. The name is not so clear why not RemoteHTTPFetcher or simply RemoteFetcher ?",
      "parentUuid": "5a43c5e1_51b6843e",
      "range": {
        "startLine": 21,
        "startChar": 46,
        "endLine": 21,
        "endChar": 66
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_51aa0472",
        "filename": "distroinfo/info.py",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 421
      },
      "writtenOn": "2018-04-09T17:45:44Z",
      "side": 1,
      "message": "I was thinking about names for these three for quite some time :) This naming comes from basic separation of Local and Remote fetchers and then distinguishes Git from Raw fetcher. Yet, \"raw\" isn\u0027t very helpful here. To general.\n\nHTTP is too strict, any requests-supported URL should work.\n\nBut I was considering just RemoteFetcher, especially as it\u0027s going to be preferred over git.\n\nSo RemoteFetcher it is.",
      "parentUuid": "5a43c5e1_7172a07e",
      "range": {
        "startLine": 21,
        "startChar": 46,
        "endLine": 21,
        "endChar": 66
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_c072c0ad",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-05T10:15:33Z",
      "side": 1,
      "message": "from distroinfo import...",
      "range": {
        "startLine": 5,
        "startChar": 7,
        "endLine": 5,
        "endChar": 16
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_63265618",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 6
      },
      "writtenOn": "2018-04-06T13:20:49Z",
      "side": 1,
      "message": "I think you should have a first step of format validation using something like voluptuous where schema is described. It helps also to have clearer schema understanding, for users/ (especially newcomer not so familiar with rdoinfo). Then functional validation in python is fine.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_f181d04e",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 421
      },
      "writtenOn": "2018-04-09T14:16:35Z",
      "side": 1,
      "message": "Actually, I was testing Cerberus for this purpose and I\u0027m not convinced it\u0027s worth the extra requirement.\n\nhttp://docs.python-cerberus.org/\n\ndistroinfo doesn\u0027t require extremely strict data, only few top level sections and few fields are required here and there but the rest is upto the user. These are already handled with custom exceptions, so I don\u0027t quite see the benefit of more complex schema validator.\n\nAs of clearer schema understanding, I plan to describe it using human language and examples in documentation.\n\nHaving docs and tests in one code sounds good and I also tested that but problem was cerberus was validating exact schema but I only wanted to ensure few key fields are as expected and not care about the rest which was surprisingly simpler to do by hand.\n\nI really wanted to use (play with) a validator, but I didn\u0027t see a very strong use case here, especially due to distroinfo not dictating much of the data structure, that is done by various *info instances like rdoinfo.\n\nSo I think we should use validation for rdoinfo specifically where some structure is in fact expected but it isn\u0027t documented anywhere.",
      "parentUuid": "5a43c5e1_63265618",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_d113740c",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-09T14:37:37Z",
      "side": 1,
      "message": "+1 to Jakub\u0027s idea. Having a somewhat loose validation allows us to add hacks like specific tags for packages, without the need to change anything on the actual Python code required to interpret it.",
      "parentUuid": "5a43c5e1_f181d04e",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_1131dca2",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 6
      },
      "writtenOn": "2018-04-09T14:41:37Z",
      "side": 1,
      "message": "Ok, well I was thinking that we should have a strict format and if an information is needed by one to be described in the distroinfo format then either that something relevant to be described for a distro / or that\u0027s an information that must be defined outsite of distroinfo. For the former, then one must ask for a support in distroinfo. If the format is strict then we know that every tools that rely on distroinfo understand the same interface. It seems important imo.",
      "parentUuid": "5a43c5e1_f181d04e",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_91ce4c59",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 421
      },
      "writtenOn": "2018-04-09T17:45:44Z",
      "side": 1,
      "message": "I see your point Fabien, but if we enforced strict format in distroinfo like that, we would esentially end with renamed rdoinfo. You can be sure if there are ever other *info instances, they\u0027ll have their unique fields and requirements.\n\nIOW enforcing strict data structure on distroinfo level will prevent it from being reusable. We should do what you say on rdoinfo level, that is strictly define the fields we expect there and validate. if someone is happy with rdoinfo format, (s)he can use the same validator on his/her instance to ensure compatibility with rdoinfo format.\n\nHowever, when rdoinfo format isn\u0027t fitting user\u0027s needs, he can just create his own distroinfo-based format by creating a new validator defining rule for that *info.\n\nSo there would be:\n- generic distroinfo module (parser, basic validator)\n- generic and extendable distroinfo format (validated by distroinfo module)\n- strict rdoinfo format (validated by rdoinfo validator based on voluptuous/cerberus schema -\u003e we need to create that yet as a next step)\n- rdoinfo repo with actual data and possibly its various forks using the common rdoinfo format ensured by common validator\n\nI wonder if the rdoinfo validator should live alongside rdoinfo data... probably not, because that would tempt people to fork the validator alongside with info data and that would lead to N different formats where N is the number of *info instances.\n\nEither way, I\u0027m pretty certain that specification of rdoinfo data structure shouldn\u0027t be part of distroinfo, changes to rdoinfo format MUST NOT require a new release of distroinfo parser.",
      "parentUuid": "5a43c5e1_1131dca2",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_ac1f6b5a",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 6
      },
      "writtenOn": "2018-04-10T08:49:20Z",
      "side": 1,
      "message": "I thought the experience we have acquired between rdoinfo and sfinfo will help us defining a sane and pretty complete format in distroinfo. Having to fork distroinfo to let say (for sf usecase) to re-create sfinfo with more fields and validation + having to support that fork in DLRN too will make the migration harder. I don\u0027t see why rdoinfo format\u0027s fields cannot be valuable for usecases outside RDO. Anyway that was just my opinion :) sure I wont block on that :). Could be nice to have feedback from other interested folk on that aspect.",
      "parentUuid": "5a43c5e1_91ce4c59",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_bcb481d1",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 201
      },
      "writtenOn": "2018-04-11T12:48:11Z",
      "side": 1,
      "message": "High-level comment: it would be still good to have a schema for documentation purposes and voluptuous would be preferred since it seems more maintained and already in openstack global-requirements (both are packaged in Fedora).\nFull validation would be optional, only really required data should fail the loading of distroinfo.",
      "parentUuid": "5a43c5e1_ac1f6b5a",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a50d1a3_7cc7d945",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 201
      },
      "writtenOn": "2018-04-11T12:51:57Z",
      "side": 1,
      "message": "Either way, schema validation can be followup,\nJakub please address Javier\u0027s -1 comments and respin so we can merge it.",
      "parentUuid": "3a50d1a3_bcb481d1",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_231a8e18",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-06T08:18:06Z",
      "side": 1,
      "message": "I was thinking... Right now when we use apply_tag, we assume that just a single tag can be used. Would it be possible to allow multiple tags to be passed, and filter the package based on all tags?\n\nThis would allow some advanced filtering, like saying \"I want all packages with the rocky-uc tag + the prodchain-critical tag\". With that, we would only care about those for certain operations.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 93,
        "endChar": 40
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_3155f8c5",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 421
      },
      "writtenOn": "2018-04-09T14:16:35Z",
      "side": 1,
      "message": "Everything is possible, but current implementation is very basic, see substitute_package(pkg) above.\n\nI don\u0027t quite understand what you mean by \"filter the package based on all tags\" in the context of apply_tag.\n\nNote that filtering by tag and applying tag are two different things:\n- applying a tag substitutes strings in package template effectively creating a new info instance for a particular tag. applying multiple tags is possible but I\u0027d suggest writing new code for that.\n- filtering by tags: there is query.filter_pkgs(pkgs, rexen) but again it\u0027s rather simple and it doesn\u0027t support this use case. Being able to select like that is a reasonable request, so I reckon either extending that function or new dedicated filter_pkgs_by_tags().",
      "parentUuid": "5a43c5e1_231a8e18",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 93,
        "endChar": 40
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_71f940c8",
        "filename": "distroinfo/parse.py",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-09T14:37:37Z",
      "side": 1,
      "message": "My request is more related to filtering, sorry for the confusion. So yes, if possible it would be great to be able to filter by more than one tag.\n\nThat said, it\u0027s more of a roadmap thing than a request for this initial implementation.",
      "parentUuid": "5a43c5e1_3155f8c5",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 93,
        "endChar": 40
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_806598e2",
        "filename": "distroinfo/query.py",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 200
      },
      "writtenOn": "2018-04-05T10:15:33Z",
      "side": 1,
      "message": "from distroinfo import...",
      "range": {
        "startLine": 5,
        "startChar": 2,
        "endLine": 5,
        "endChar": 16
      },
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_431d5abc",
        "filename": "distroinfo/query.py",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 6
      },
      "writtenOn": "2018-04-06T13:20:49Z",
      "side": 1,
      "message": "Good idea to define those facilities here :)",
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a43c5e1_11631cb3",
        "filename": "distroinfo/query.py",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 421
      },
      "writtenOn": "2018-04-09T14:16:35Z",
      "side": 1,
      "message": "this is strangely specific... hmm :-/",
      "revId": "5326151c7c78dcda8acdb6cba0a4924665b10483",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    }
  ]
}